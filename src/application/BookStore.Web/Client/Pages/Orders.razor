
@page "/Orders"
@inject HttpClient Http

<h3>Orders</h3>

<table style="width:100%">
    <tbody>
        <tr>
            <td><button @onclick="ShowAddOrderWindow" class="btn btn-outline-secondary">Checkout</button></td>
        </tr>
        <tr>
            <td>
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th scope="col">Id</th>
                            <th scope="col">Comment</th>
                            <th scope="col">Books count</th>
                            <th scope="col">Summary price</th>
                            <th scope="col">Order datetime</th>
                            <th scope="col">Order status</th>
                            <th scope="col">Seller</th>
                            <th scope="col">Buyer</th>
                            <th scope="col">Email</th>
                            <th scope="col">Phone number</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var order in orders.Skip(PageItemCount * CurrentPageId - 1).Take(PageItemCount))
                        {
                            <tr class="clickable-row" @onclick="() => ShowAndLoadDescriptionWindow(order.Id)">
                                <td scope="row">@order.Id</td>
                                <td scope="row">@order.Comment</td>
                                <td scope="row">@order.BooksCount</td>
                                <td scope="row">@order.SummaryPrice</td>
                                <td scope="row">@order.OrderDateTime</td>
                                <td scope="row">@(orderStatuses.FirstOrDefault(x => x.Id == order.OrderStatusId).Name)</td>
                                <td scope="row">@order.SellerName</td>
                                <td scope="row">@order.BuyerName</td>
                                <td scope="row">@order.BuyerEmail</td>
                                <td scope="row">@order.BuyerPhoneNumber</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </td>
        </tr>
        <tr>
            <td>
                <BookStore.Web.Client.Components.Pagination ItemsCount="@orders.Count" @bind-CurrentPageId="CurrentPageId" @bind-PageItemCount="PageItemCount">
                </BookStore.Web.Client.Components.Pagination>
            </td>
        </tr>
    </tbody>
</table>

<BookStore.Web.Client.Components.LoadWindow Show="IsShowLoadWindow">

</BookStore.Web.Client.Components.LoadWindow>


<BookStore.Web.Client.Components.ModalWindow Show="@IsShowAddModal">
    <EditForm Model="order" OnValidSubmit="@AddSubmit">
        <DataAnnotationsValidator />

        <div class="modal-header form-group without-padding">
            <h5 class="modal-title">Order adding</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideAddWindow">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="form-group">
            <label>Comment</label>
            <InputText class="form-control" @bind-Value="order.Comment" />
            <ValidationMessage For="() => order.Comment" />
        </div>

        <div class="form-group">
            <label>Description</label>
            <InputDate class="form-control" @bind-Value="OrderDate" />
            <ValidationMessage For="() => order.OrderDateTime" />
        </div>

        <div class="form-group">
            <label>Buyer</label>
            <select class="form-control" @bind="order.BuyerId">
                <option selected>-- select buyer (if exist) --</option>
                @foreach (var buyer in buyers)
                {
                    <option value="@buyer.Id">@buyer.FirstName @buyer.LastName @buyer.PhoneNumber</option>
                }
            </select>
            <ValidationMessage For="() => order.BuyerId" />
        </div>

        <div class="form-group">
            <label>Seller</label>
            <select class="form-control" @bind="order.SellerId">
                <option selected>-- select seller (if exist) --</option>
                @foreach (var seller in sellers)
                {
                    <option value="@seller.Id">@seller.FirstName @seller.LastName @seller.PhoneNumber</option>
                }
            </select>
            <ValidationMessage For="() => order.SellerId" />
        </div>

        <div class="form-group">
            <label>Order status</label>
            <select class="form-control" @bind="order.OrderStatusId">
                <option selected>-- select status --</option>
                @foreach (var orderStatus in orderStatuses)
                {
                    <option value="@orderStatus.Id">@orderStatus.Name</option>
                }
            </select>
            <ValidationMessage For="() => order.OrderStatusId" />f
        </div>

        <div class="form-group">
            <label>Books</label>
            <button type="submit" class="btn btn-outline-primary" data-dismiss="modal" @onclick="ShowBooksWindows">Choose books</button>
        </div>
        <div class="modal-footer">
            <button type="submit" class="btn btn-outline-primary" data-dismiss="modal">Confirm</button>
            <button type="button" class="btn btn-outline-secondary" @onclick="HideAddWindow">Cancel</button>
        </div>
    </EditForm>
</BookStore.Web.Client.Components.ModalWindow>

<BookStore.Web.Client.Components.WideModalWindow Show="IsShowBooksTableModal">
    <div class="modal-header form-group without-padding">
        <h5 class="modal-title">Available books</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideBookTableWindow">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <table style="width:100%">
        <tbody>
            <tr>
                <td>
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th scope="col">Name</th>
                                <th scope="col">Description</th>
                                <th scope="col">ReleaseDate</th>
                                <th scope="col">Count</th>
                                <th scope="col">Price for one</th>
                                <th scope="col" style="text-align:center">Selected count</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var book in books.Skip(BookPageItemCount * BookCurrentPageId - 1).Take(BookPageItemCount))
                            {
                                <tr class="clickable-row">
                                    <td scope="row">@book.Name</td>
                                    <td scope="row"><button class="btn-outline-secondary" @onclick="() => ShowBookDescriptionWindow(book.Id)">Show description</button></td>
                                    <td scope="row">@book.ReleaseDate.ToString("dd-MM-yyyy")</td>
                                    <td scope="row">@book.Count</td>
                                    <td scope="row">@book.Price</td>
                                    <td scope="row" style="text-align:center">
                                        <div style="display:inline-block">
                                            <button type="submit" class="btn btn-outline-danger btn-increment-decrement" data-dismiss="modal" @onclick="() => DeleteBook(book.Id)">
                                                <span>-</span>
                                            </button>
                                        </div>
                                        <div style="display:inline-block;max-width:87px;">
                                            <input type="number" readonly class="form-control" max="@book.Count" maxlength="@book.Count.ToString().Length" value="@(orderBooks.FirstOrDefault(x => x.BookId == book.Id)?.Count ?? 0)">
                                        </div>
                                        <div style="display:inline-block">
                                            <button type="submit" class="btn btn-outline-primary btn-increment-decrement" data-dismiss="modal" @onclick="() => AddBook(book.Id)">
                                                <span>+</span>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </td>
            </tr>
            <tr>
                <td>
                    <BookStore.Web.Client.Components.Pagination ItemsCount="@books.Count" @bind-CurrentPageId="BookCurrentPageId" @bind-PageItemCount="BookPageItemCount" IsShow15ItemsButton="false">
                    </BookStore.Web.Client.Components.Pagination>
                </td>
            </tr>
        </tbody>
    </table>
</BookStore.Web.Client.Components.WideModalWindow>

<BookStore.Web.Client.Components.ModalWindow Show="@IsShowBookDescriptionModal">
    <div class="modal-header form-group without-padding">
        <h5 class="modal-title">Book description</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideBookDescriptionWindow">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <table style="width:100%">
        <tbody>
            <tr>
                <td style="padding-right:10px; width:55%;">
                    <div>
                        <p class="font-weight-bold">Name</p>
                        <p class="text-justify font-weight-normal">@book.Name</p>
                        <p class="font-weight-bold">Description</p>
                        <p><textarea class="form-control no-resize" rows="10" readonly>@book.Description</textarea></p>
                        <p class="font-weight-bold">Release date</p>
                        <p class="text-justify font-weight-normal">@book.ReleaseDate.ToString("dd-MM-yyyy")</p>
                        <p class="font-weight-bold">Available count</p>
                        <p class="text-justify font-weight-normal">@book.Count</p>
                        <p class="font-weight-bold">Current price</p>
                        <p class="text-justify font-weight-normal">@book.Price</p>
                    </div>
                </td>
                <td style="vertical-align:top; width:45%;">
                    <div>
                        <label class="font-weight-bold" style="width:100%">Picture</label>
                    </div>
                    <div class="form-group">
                        <div style="text-align:center; width:100%;">
                            <img class="img-thumbnail" src="@(string.IsNullOrEmpty(book.Image) ? "img/default.jpg" :book.Image)" />
                        </div>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
    <div class="modal-footer">
        <button type="button" class="btn btn-outline-secondary" @onclick="HideBookDescriptionWindow">Close</button>
    </div>
</BookStore.Web.Client.Components.ModalWindow>

@code
{
    private Order order = new Order();
    private List<OrderShort> orders = new List<OrderShort>();
    private List<User> users = new List<User>();
    private List<User> buyers = new List<User>();
    private List<User> sellers = new List<User>();
    private List<UserRole> userRoles = new List<UserRole>();
    private List<OrderStatus> orderStatuses = new List<OrderStatus>();
    private List<Book> books = new List<Book>();
    private List<OrderBook> orderBooks = new List<OrderBook>();
    private Book book = new Book();

    private int CurrentPageId { get; set; } = 0;
    private int PageItemCount { get; set; } = 10;

    private int BookCurrentPageId { get; set; } = 0;
    private int BookPageItemCount { get; set; } = 10;

    private DateTime OrderDate
    {
        get
        {
            order.OrderDateTime = order.OrderDateTime == default(DateTime) ? DateTime.Now : order.OrderDateTime;
            return order.OrderDateTime;
        }
        set => order.OrderDateTime = value;
    }

    private bool IsShowAddModal { get; set; }
    private bool IsShowDeleteModal { get; set; }
    private bool IsShowDescriptionModal { get; set; }
    private bool IsShowUpdateModal { get; set; }
    private bool IsShowLoadWindow { get; set; }
    private bool IsShowBooksTableModal { get; set; }
    private bool IsShowBookDescriptionModal { get; set; }

    #region Show/Hide

    protected void ShowAddOrderWindow()
    {
        order = new Order();
        this.IsShowAddModal = true;
        HideDeleteWindow();
        HideDescriptionWindow();
    }

    private void ShowBookDescriptionWindow(int bookId)
    {
        book = books.FirstOrDefault(x => x.Id == bookId);
        this.IsShowBookDescriptionModal = true;
    }

    private void HideBookDescriptionWindow()
    {
        book = new Book();
        this.IsShowBookDescriptionModal = false;
    }

    private void ShowBookTableWindow()
    {
        this.IsShowBooksTableModal = true;
    }

    private void HideBookTableWindow()
    {
        this.IsShowBooksTableModal = false;
    }

    protected void HideAddWindow()
    {
        this.IsShowAddModal = false;
    }

    protected void ShowDeleteWindow()
    {
        this.IsShowDeleteModal = true;
    }

    protected void HideDeleteWindow()
    {
        this.IsShowDeleteModal = false;
    }

    protected void ShowBooksWindows()
    {
        this.IsShowBooksTableModal = true;
    }

    protected void HideBooksWindows()
    {
        this.IsShowBooksTableModal = false;
    }

    protected async Task ShowAndLoadDescriptionWindow(int id)
    {
        HideUpdateWindow();
        HideDeleteWindow();
        HideAddWindow();
        await LoadOrderById(id);
        this.IsShowDescriptionModal = true;
    }

    private void HideDescriptionWindow()
    {
        this.IsShowDescriptionModal = false;
    }

    private void HideUpdateWindow()
    {
        this.IsShowUpdateModal = false;
    }

    private void ShowUpdateWindow()
    {
        this.IsShowUpdateModal = true;
    }

    #endregion

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
        await LoadUsers();
        await LoadBooks();
    }

    #region Handlers

    private void AddBook(int bookId)
    {
        var orderBook = orderBooks.FirstOrDefault(x => x.BookId == bookId);
        var book = books.FirstOrDefault(x => x.Id == bookId);
        if (orderBook == null)
        {
            if (book.Count != 0)
            {
                orderBook = new OrderBook()
                {
                    BookId = bookId,
                    Count = 1
                };

                orderBooks.Add(orderBook);
            }
        }
        else
        {
            if (book.Count > orderBook.Count)
            {
                orderBooks.First(x => x.BookId == bookId).Count++;
            }
        }
    }

    private void DeleteBook(int bookId)
    {
        var orderBook = orderBooks.FirstOrDefault(x => x.BookId == bookId);
        var book = books.FirstOrDefault(x => x.Id == bookId);
        if (orderBook != null)
        {
            if (orderBook.Count != 0)
            {
                orderBooks.First(x => x.BookId == bookId).Count--;
            }
            else
            {
                orderBooks.Remove(orderBook);
            }
        }
    }

    private void SetBookCount(int bookId, ChangeEventArgs e)
    {
        var orderBook = orderBooks.FirstOrDefault(x => x.BookId == bookId);
        var book = books.FirstOrDefault(x => x.Id == bookId);

        var isTrueParse = int.TryParse(e.Value.ToString().Replace("'", string.Empty), out int inputBookCount);
        var isAvailableCount = book.Count <= inputBookCount;

        var count = isTrueParse ? (isAvailableCount ? book.Count : inputBookCount) : book.Count;
        if (!isTrueParse)
        {
            inputBookCount = count;
        }

        if (orderBook == null)
        {
            if (book.Count != 0)
            {
                orderBook = new OrderBook()
                {
                    BookId = bookId,
                    Count = count
                };

                orderBooks.Add(orderBook);
            }
        }
        else
        {
            orderBooks.First(x => x.BookId == bookId).Count = count;
        }

        if (inputBookCount <= 0)
        {
            orderBooks.Remove(orderBook);
        }
    }

    #endregion

    #region Load

    private async Task LoadOrders()
    {
        IsShowLoadWindow = true;
        orders = await Http.GetFromJsonAsync<List<OrderShort>>("Order");
        orderStatuses = await Http.GetFromJsonAsync<List<OrderStatus>>("Order/Statuses");
        IsShowLoadWindow = false;
    }

    private async Task LoadBooks()
    {
        IsShowLoadWindow = true;
        books = await Http.GetFromJsonAsync<List<Book>>("Book");
        IsShowLoadWindow = false;
    }

    private async Task LoadUsers()
    {
        this.IsShowLoadWindow = true;
        users = await Http.GetFromJsonAsync<List<User>>("User");
        userRoles = await Http.GetFromJsonAsync<List<UserRole>>("User/Roles");
        buyers = users.Where(x => userRoles.FirstOrDefault(y => y.Code == "Buyer").Id == x.UserRoleId).ToList();
        sellers = users.Where(x => userRoles.FirstOrDefault(y => y.Code == "Seller").Id == x.UserRoleId).ToList();
        this.IsShowLoadWindow = false;
    }

    private async Task LoadOrderById(int id)
    {
        order = await Http.GetFromJsonAsync<Order>($"Order/{id}");
    }

    #endregion

    #region Add/Update/Delete

    private async Task AddOrder()
    {
        await Http.PostAsJsonAsync("Order", order);
    }

    private async Task UpdateOrder()
    {
        var result = await Http.PutAsJsonAsync("Order", order);
        order = await result.Content.ReadFromJsonAsync<Order>();
    }

    private async Task DeleteOrder(int id)
    {
        await Http.DeleteAsync($"Book/{id}");
        await LoadOrders();
        HideDeleteWindow();
        HideDescriptionWindow();
        HideUpdateWindow();
    }

    protected async Task AddSubmit()
    {
        await AddOrder();
        await LoadOrders();
        await LoadUsers();
        HideAddWindow();
        HideDeleteWindow();
        HideDescriptionWindow();
        HideUpdateWindow();
    }

    protected async Task UpdateSubmit()
    {
        await UpdateOrder();
        await LoadOrders();
        HideAddWindow();
        HideDeleteWindow();
        HideUpdateWindow();
    }

    #endregion


}
