
@page "/Books"
@inject HttpClient Http

<h3>Books</h3>

<table style="width:100%">
    <tbody>
        <tr>
            <td style="padding-bottom:10px; padding-top:10px;"><button @onclick="ShowAddBookWindow" class="btn btn-primary">Add book</button></td>
        </tr>
        <tr>
            <td>
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th scope="col">Id</th>
                            <th scope="col">Name</th>
                            <th scope="col">ReleaseDate</th>
                            <th scope="col">Available count</th>
                            <th scope="col">Current price</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var book in books.Skip(PageItemCount * CurrentPageId - 1).Take(PageItemCount))
                        {
                            <tr class="clickable-row" @onclick="() => ShowAndLoadDescriptionWindow(book.Id)">
                                <td scope="row">@book.Id</td>
                                <td scope="row">@book.Name</td>
                                <td scope="row">@book.ReleaseDate.ToString("dd-MM-yyyy")</td>
                                <td scope="row">@book.Count</td>
                                <td scope="row">@book.Price</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </td>
        </tr>
        <tr>
            <td>
                <BookStore.Web.Client.Components.Pagination ItemsCount="@books.Count" @bind-CurrentPageId="CurrentPageId" @bind-PageItemCount="PageItemCount">

                </BookStore.Web.Client.Components.Pagination>
            </td>
        </tr>
    </tbody>
</table>

<BookStore.Web.Client.Components.ModalWindow Show="@IsShowDescriptionModal">

    <div class="modal-header form-group without-padding">
        <h5 class="modal-title">Book description</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideDescriptionWindow">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <table style="width:100%">
        <tbody>
            <tr>
                <td style="padding-right:10px; width:55%;">
                    <div>
                        <p class="font-weight-bold">Name</p>
                        <p class="text-justify font-weight-normal">@book.Name</p>
                        <p class="font-weight-bold">Description</p>
                        <p><textarea class="form-control no-resize" rows="10" readonly>@book.Description</textarea></p>
                        <p class="font-weight-bold">Release date</p>
                        <p class="text-justify font-weight-normal">@book.ReleaseDate.ToString("dd-MM-yyyy")</p>
                        <p class="font-weight-bold">Available count</p>
                        <p class="text-justify font-weight-normal">@book.Count</p>
                        <p class="font-weight-bold">Current price</p>
                        <p class="text-justify font-weight-normal">@book.Price</p>
                    </div>
                </td>
                <td style="vertical-align:top; width:45%;">
                    <div>
                        <label class="font-weight-bold" style="width:100%">Picture</label>
                    </div>
                    <div class="form-group">
                        <div style="text-align:center; width:100%;">
                            <img class="img-thumbnail" src="@(string.IsNullOrEmpty(book.Image) ? "img/default.jpg" :book.Image)" />
                        </div>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
    <div class="modal-footer">
        <button type="button" class="btn btn-outline-danger" @onclick="ShowDeleteWindow">Delete</button>
        <button type="button" class="btn btn-outline-secondary" @onclick="ShowUpdateWindow">Update</button>
        <button type="button" class="btn btn-outline-secondary" @onclick="HideDescriptionWindow">Cancel</button>
    </div>
</BookStore.Web.Client.Components.ModalWindow>

<BookStore.Web.Client.Components.ModalWindow Show="@IsShowDeleteModal">
    <div class="modal-header form-group without-padding">
        <h5 class="modal-title" id="exampleModalLabel">Delete book</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideDeleteWindow">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <div class="modal-body">
        The book will be deleted from catalog.
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="HideDeleteWindow">Cancel</button>
        <button type="button" class="btn btn-outline-danger" @onclick="() => DeleteBook(book.Id)">Confirm</button>
    </div>
</BookStore.Web.Client.Components.ModalWindow>

<BookStore.Web.Client.Components.ModalWindow Show="@IsShowUpdateModal">
    <EditForm Model="book" OnValidSubmit="@UpdateSubmit">
        <DataAnnotationsValidator />
        <div class="modal-header form-group without-padding">
            <h5 class="modal-title">Book updating</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideUpdateWindow">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <table style="width:100%">
            <tbody>
                <tr>
                    <td style="padding-right:10px; width:55%;">
                        <div class="form-group">
                            <label class="font-weight-bold">Name</label>
                            <InputText class="form-control" @bind-Value="book.Name" />
                            <ValidationMessage For="() => book.Name" />
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Description</label>
                            <InputTextArea class="form-control no-resize" @bind-Value="book.Description" />
                            <ValidationMessage For="() => book.Description" />
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Release date</label>
                            <InputDate class="form-control" @bind-Value="ReleaseDate" />
                            <ValidationMessage For="() => book.ReleaseDate" />
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Available count</label>
                            <InputNumber class="form-control" @bind-Value="book.Count" />
                            <ValidationMessage For="() => book.Count" />
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Current price</label>
                            <InputNumber class="form-control" @bind-Value="book.Price" />
                            <ValidationMessage For="() => book.Price" />
                        </div>
                    </td>
                    <td style="vertical-align:top; width:45%;">
                        <div>
                            <label class="font-weight-bold" style="width:100%">Picture</label>
                        </div>
                        <div class="form-group" style="text-align:center; width:100%; position:relative">
                            <InputFile class="custom-file-input file-load-fill-container" OnChange="@OnInputFileChange" />
                            <img class="img-thumbnail" src="@(string.IsNullOrEmpty(book.Image) ? "img/default.jpg" :book.Image)" />
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
        <div class="modal-footer">
            <button type="submit" class="btn btn-outline-primary" data-dismiss="modal">Confirm</button>
            <button type="button" class="btn btn-outline-secondary" @onclick="HideUpdateWindow">Cancel</button>
        </div>
    </EditForm>
</BookStore.Web.Client.Components.ModalWindow>

<BookStore.Web.Client.Components.ModalWindow Show="@IsShowAddModal">
    <EditForm Model="book" OnValidSubmit="@AddSubmit">
        <DataAnnotationsValidator />
        <div class="modal-header form-group without-padding">
            <h5 class="modal-title">Book adding</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideAddWindow">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <table style="width:100%">
            <tbody>
                <tr>
                    <td style="padding-right:10px; width:55%">
                        <div class="form-group">
                            <label class="font-weight-bold">Name</label>
                            <InputText class="form-control" @bind-Value="book.Name" />
                            <ValidationMessage For="() => book.Name" />
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Description</label>
                            <InputTextArea class="form-control no-resize" @bind-Value="book.Description" />
                            <ValidationMessage For="() => book.Description" />
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Release date</label>
                            <InputDate class="form-control" @bind-Value="ReleaseDate" />
                            <ValidationMessage For="() => book.ReleaseDate" />
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Available count</label>
                            <InputNumber class="form-control" @bind-Value="book.Count" />
                            <ValidationMessage For="() => book.Count" />
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Current price</label>
                            <InputNumber class="form-control" @bind-Value="book.Price" />
                            <ValidationMessage For="() => book.Price" />
                        </div>
                    </td>
                    <td style="vertical-align:top; width:45%;">
                        <div>
                            <label class="font-weight-bold" style="width:100%">Picture</label>
                        </div>
                        <div class="form-group" style="text-align:center; width:100%; position:relative">
                            <InputFile class="custom-file-input file-load-fill-container" OnChange="@OnInputFileChange" />
                            <img class="img-thumbnail" src="@(string.IsNullOrEmpty(book.Image) ? "img/default.jpg" :book.Image)" />
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
        <div class="modal-footer">
            <button type="submit" class="btn btn-outline-primary" data-dismiss="modal">Add</button>
            <button type="button" class="btn btn-outline-secondary" @onclick="HideAddWindow">Cancel</button>
        </div>
    </EditForm>
</BookStore.Web.Client.Components.ModalWindow>

<BookStore.Web.Client.Components.LoadWindow Show="IsShowLoadWindow">

</BookStore.Web.Client.Components.LoadWindow>



@code
{
    private int CurrentPageId { get; set; } = 0;
    private int PageItemCount { get; set; } = 10;


    private Book book = new Book();
    private List<Book> books = new List<Book>();
    private DateTime ReleaseDate
    {
        get
        {
            book.ReleaseDate = book.ReleaseDate == default(DateTime) ? DateTime.Now : book.ReleaseDate;
            return book.ReleaseDate;
        }
        set => book.ReleaseDate = value;
    }
    private bool IsShowAddModal { get; set; }
    private bool IsShowDeleteModal { get; set; }
    private bool IsShowDescriptionModal { get; set; }
    private bool IsShowUpdateModal { get; set; }
    private bool IsShowLoadWindow { get; set; }


    private IList<string> imageDataUrls = new List<string>();

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";

        var imageFile = e.File;

        var resizedImageFile = await imageFile.RequestImageFileAsync(format, 240, 240);
        var buffer = new byte[resizedImageFile.Size];
        await resizedImageFile.OpenReadStream(maxAllowedSize: 20480000).ReadAsync(buffer);
        var imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        book.Image = imageDataUrl;

    }

    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();
    }

    protected void ShowAddBookWindow()
    {
        book = new Book();
        this.IsShowDescriptionModal = false;
        this.IsShowUpdateModal = false;
        this.IsShowDeleteModal = false;
        this.IsShowAddModal = true;
    }

    protected void HideAddWindow()
    {
        this.IsShowDescriptionModal = false;
        this.IsShowUpdateModal = false;
        this.IsShowDeleteModal = false;
        this.IsShowAddModal = false;
    }

    protected void ShowDeleteWindow()
    {
        this.IsShowDescriptionModal = false;
        this.IsShowUpdateModal = false;
        this.IsShowDeleteModal = true;
        this.IsShowAddModal = false;
    }

    protected void HideDeleteWindow()
    {
        this.IsShowDescriptionModal = true;
        this.IsShowUpdateModal = false;
        this.IsShowDeleteModal = false;
        this.IsShowAddModal = false;
    }

    protected async Task ShowAndLoadDescriptionWindow(int id)
    {
        await LoadBookById(id);
        this.IsShowDescriptionModal = true;
        this.IsShowUpdateModal = false;
        this.IsShowDeleteModal = false;
        this.IsShowAddModal = false;
    }

    private void HideDescriptionWindow()
    {
        this.IsShowDescriptionModal = false;
        this.IsShowUpdateModal = false;
        this.IsShowDeleteModal = false;
        this.IsShowAddModal = false;
    }

    private void HideUpdateWindow()
    {
        this.IsShowDescriptionModal = true;
        this.IsShowUpdateModal = false;
        this.IsShowDeleteModal = false;
        this.IsShowAddModal = false;
    }

    private void ShowUpdateWindow()
    {
        this.IsShowDescriptionModal = false;
        this.IsShowUpdateModal = true;
        this.IsShowDeleteModal = false;
        this.IsShowAddModal = false;
    }
    private async Task LoadBooks()
    {
        IsShowLoadWindow = true;
        books = await Http.GetFromJsonAsync<List<Book>>("Book");
        IsShowLoadWindow = false;
    }

    private async Task LoadBookById(int id)
    {
        book = await Http.GetFromJsonAsync<Book>($"Book/{id}");
    }

    private async Task AddBook()
    {
        await Http.PostAsJsonAsync("Book", book);
        this.IsShowDescriptionModal = false;
        this.IsShowUpdateModal = false;
        this.IsShowDeleteModal = false;
        this.IsShowAddModal = false;
    }

    private async Task UpdateBook()
    {
        var result = await Http.PutAsJsonAsync("Book", book);
        book = await result.Content.ReadFromJsonAsync<Book>();
        this.IsShowDescriptionModal = true;
        this.IsShowUpdateModal = false;
        this.IsShowDeleteModal = false;
        this.IsShowAddModal = false;
    }

    private async Task DeleteBook(int id)
    {
        await Http.DeleteAsync($"Book/{id}");
        await LoadBooks();
        this.IsShowDescriptionModal = false;
        this.IsShowUpdateModal = false;
        this.IsShowDeleteModal = false;
        this.IsShowAddModal = false;
    }

    protected async Task AddSubmit()
    {
        await AddBook();
        await LoadBooks();
        this.IsShowDescriptionModal = false;
        this.IsShowUpdateModal = false;
        this.IsShowDeleteModal = false;
        this.IsShowAddModal = false;
    }

    protected async Task UpdateSubmit()
    {
        await UpdateBook();
        await LoadBooks();
        this.IsShowDescriptionModal = true;
        this.IsShowUpdateModal = false;
        this.IsShowDeleteModal = false;
        this.IsShowAddModal = false;
    }
}
