
@page "/"
@inject HttpClient Http

<h3>Books</h3>

<table style="width:100%">
    <tbody>
        <tr>
            <td colspan="2" style="padding-bottom:10px; padding-top:10px;">
                <table style="width: 100%">
                    <tbody>
                        <tr>
                            <td>
                                @if (UserStaticInfo.IsSeller)
                                {
                                    <button @onclick="ShowAddBookWindow" class="btn btn-primary">Add book</button>
                                }
                            </td>
                            <td>
                                <nav aria-label="...">
                                    <ul class="pagination">
                                        <li class="page-item @(IsCardsShow ? "active" : "")" @onclick="() => { IsCardsShow = true; }">
                                            <a class="page-link">Cards</a>
                                        </li>
                                        <li class="page-item @(!IsCardsShow ? "active" : "")" @onclick="() => { IsCardsShow = false; }">
                                            <a class="page-link">Table</a>
                                        </li>
                                    </ul>
                                </nav>
                            </td>
                            <td style="padding-bottom:10px; padding-top:10px; text-align:end; width:200px;">
                                <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search" @oninput="Search">
                            </td>
                        </tr>
                    </tbody>
                </table>
            </td>
        </tr>
        <tr>
            <td hidden="@(!IsCardsShow)" colspan="2">
                <div style="width:100%">
                    @foreach (var book in books.Where(x => SearchBook(x)).Skip(PageItemCount * CurrentPageId - 1).Take(PageItemCount))
                    {
                        <div class="card" style="width: 18rem; float:left; margin-right:10px; margin-bottom:10px;">
                            <div class="form-group">
                                <div style="text-align:center; display: block; margin-top: 20px; margin-left: auto; margin-right: auto; height:250px;">
                                    <img class="img-thumbnail" src="@(string.IsNullOrEmpty(book.Image) ? "img/default.jpg" :book.Image)" />
                                </div>
                            </div>
                            <div class="card-body">
                                <h5 class="card-title" style="height: 48px;overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">@book.Name</h5>
                                <p>Release date: @book.ReleaseDate.ToString("dd-MM-yyyy")</p>
                                <p>Count: @book.Count</p>
                                <p>Price: @book.Price</p>
                                <button class="btn btn-outline-info" @onclick="() => ShowAndLoadDescriptionWindow(book.Id)">Details</button>
                            </div>
                        </div>
                    }
                </div>
            </td>
            <td hidden="@(IsCardsShow)" colspan="2">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th scope="col">Id</th>
                            <th scope="col">Name</th>
                            <th scope="col">ReleaseDate</th>
                            <th scope="col">Available count</th>
                            <th scope="col">Current price</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var book in books.Where(x => SearchBook(x)).Skip(PageItemCount * CurrentPageId - 1).Take(PageItemCount))
                        {
                            <tr class="clickable-row" @onclick="() => ShowAndLoadDescriptionWindow(book.Id)">
                                <td scope="row">@book.Id</td>
                                <td scope="row">@book.Name</td>
                                <td scope="row">@book.ReleaseDate.ToString("dd-MM-yyyy")</td>
                                <td scope="row">@book.Count</td>
                                <td scope="row">@book.Price</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </td>

        </tr>
        <tr>
            <td colspan="2">
                <BookStore.Web.Client.Components.Pagination ItemsCount="@books.Where(x => SearchBook(x)).Count()" @bind-CurrentPageId="CurrentPageId" @bind-PageItemCount="PageItemCount">

                </BookStore.Web.Client.Components.Pagination>
            </td>
        </tr>
    </tbody>
</table>

<BookStore.Web.Client.Components.ModalWindow Show="@IsShowDescriptionModal">

    <div class="modal-header form-group without-padding">
        <h5 class="modal-title">Book description</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideDescriptionWindow">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <table style="width:100%">
        <tbody>
            <tr>
                <td style="padding-right:10px; width:55%;">
                    <div>
                        <p class="font-weight-bold">Name</p>
                        <p class="text-justify font-weight-normal">@book.Name</p>
                        <p class="font-weight-bold">Description</p>
                        <p><textarea class="form-control no-resize" rows="10" readonly>@book.Description</textarea></p>
                        <p class="font-weight-bold">Release date</p>
                        <p class="text-justify font-weight-normal">@book.ReleaseDate.ToString("dd-MM-yyyy")</p>
                        <p class="font-weight-bold">Available count</p>
                        <p class="text-justify font-weight-normal">@book.Count</p>
                        <p class="font-weight-bold">Current price</p>
                        <p class="text-justify font-weight-normal">@book.Price</p>
                    </div>
                </td>
                <td style="vertical-align:top; width:45%;">
                    <div>
                        <label class="font-weight-bold" style="width:100%">Picture</label>
                    </div>
                    <div class="form-group">
                        <div style="text-align:center; width:100%;">
                            <img class="img-thumbnail" src="@(string.IsNullOrEmpty(book.Image) ? "img/default.jpg" :book.Image)" />
                        </div>
                    </div>
                    <div>
                        <p class="font-weight-bold">Authors</p>
                        <p style="height: 48px; overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">@string.Concat(authors.Where(x => book.AuthorIds.Contains(x.Id)).Select(x => $"{x.FirstName} {x.LastName}; "))</p>
                        <p class="font-weight-bold">Genres</p>
                        <p style="height: 48px; overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">@string.Concat(genres.Where(x => book.GenreIds.Contains(x.Id)).Select(x => $"{x.Name}; "))</p>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
    <div class="modal-footer">
        @if (UserStaticInfo.IsSeller)
        {
            <button type="button" class="btn btn-outline-danger" @onclick="ShowDeleteWindow">Delete</button>
            <button type="button" class="btn btn-outline-secondary" @onclick="ShowUpdateWindow">Update</button>
        }
        <button type="button" class="btn btn-outline-secondary" @onclick="HideDescriptionWindow">Cancel</button>
    </div>
</BookStore.Web.Client.Components.ModalWindow>

<BookStore.Web.Client.Components.ModalWindow Show="@IsShowDeleteModal">
    <div class="modal-header form-group without-padding">
        <h5 class="modal-title" id="exampleModalLabel">Delete book</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideDeleteWindow">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <div class="modal-body">
        The book will be deleted from catalog.
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="HideDeleteWindow">Cancel</button>
        <button type="button" class="btn btn-outline-danger" @onclick="() => DeleteBook(book.Id)">Confirm</button>
    </div>
</BookStore.Web.Client.Components.ModalWindow>

<BookStore.Web.Client.Components.ModalWindow Show="@IsShowUpdateModal">
    <EditForm Model="book" OnValidSubmit="@UpdateSubmit">
        <DataAnnotationsValidator />
        <div class="modal-header form-group without-padding">
            <h5 class="modal-title">Book updating</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideUpdateWindow">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <table style="width:100%">
            <tbody>
                <tr>
                    <td style="padding-right:10px; width:55%;">
                        <div class="form-group">
                            <label class="font-weight-bold">Name</label>
                            <InputText class="form-control" @bind-Value="book.Name" />
                            <ValidationMessage For="() => book.Name" />
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Description</label>
                            <InputTextArea class="form-control no-resize" @bind-Value="book.Description" />
                            <ValidationMessage For="() => book.Description" />
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Release date</label>
                            <InputDate class="form-control" @bind-Value="ReleaseDate" />
                            <ValidationMessage For="() => book.ReleaseDate" />
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Available count</label>
                            <InputNumber class="form-control" @bind-Value="book.Count" />
                            <ValidationMessage For="() => book.Count" />
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Current price</label>
                            <InputNumber class="form-control" @bind-Value="book.Price" />
                            <ValidationMessage For="() => book.Price" />
                        </div>
                    </td>
                    <td style="vertical-align:top; width:45%;">
                        <div>
                            <label class="font-weight-bold" style="width:100%">Picture</label>
                        </div>
                        <div class="form-group" style="text-align:center; width:100%; position:relative">
                            <InputFile class="custom-file-input file-load-fill-container" OnChange="@OnInputFileChange" />
                            <img class="img-thumbnail" src="@(string.IsNullOrEmpty(book.Image) ? "img/default.jpg" :book.Image)" />
                        </div>
                        <div class="form-group">
                            <button type="button" class="form-control btn btn-outline-primary" data-dismiss="modal" @onclick="ShowAuthorWindow">Choose authors</button>
                            <p style="height: 48px; overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;"><b>Authors: </b>@string.Concat(authors.Where(x => bookAuthors.Any(y => y.AuthorId == x.Id)).Select(x => $"{x.FirstName} {x.LastName}; "))</p>
                        </div>
                        <div class="form-group">
                            <button type="button" class="form-control btn btn-outline-primary" data-dismiss="modal" @onclick="ShowGenreWindow">Choose genres</button>
                            <p style="height: 48px; overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;"><b>Genres: </b>@string.Concat(genres.Where(x => bookGenres.Any(y => y.GenreId == x.Id)).Select(x => $"{x.Name}; "))</p>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
        <div class="modal-footer">
            <button type="submit" class="btn btn-outline-primary" data-dismiss="modal">Confirm</button>
            <button type="button" class="btn btn-outline-secondary" @onclick="HideUpdateWindow">Cancel</button>
        </div>
    </EditForm>
</BookStore.Web.Client.Components.ModalWindow>

<BookStore.Web.Client.Components.ModalWindow Show="@IsShowAddModal">
    <EditForm Model="book" OnValidSubmit="@AddSubmit">
        <DataAnnotationsValidator />
        <div class="modal-header form-group without-padding">
            <h5 class="modal-title">Book adding</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideAddWindow">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <table style="width:100%">
            <tbody>
                <tr>
                    <td style="padding-right:10px; width:55%; max-width:5px">
                        <div class="form-group">
                            <label class="font-weight-bold">Name</label>
                            <InputText class="form-control" @bind-Value="book.Name" />
                            <ValidationMessage For="() => book.Name" />
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Description</label>
                            <InputTextArea class="form-control no-resize" @bind-Value="book.Description" />
                            <ValidationMessage For="() => book.Description" />
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Release date</label>
                            <InputDate class="form-control" @bind-Value="ReleaseDate" />
                            <ValidationMessage For="() => book.ReleaseDate" />
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Available count</label>
                            <InputNumber class="form-control" @bind-Value="book.Count" />
                            <ValidationMessage For="() => book.Count" />
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Current price</label>
                            <InputNumber class="form-control" @bind-Value="book.Price" />
                            <ValidationMessage For="() => book.Price" />
                        </div>
                    </td>
                    <td style="vertical-align:top; width:45%;">
                        <div>
                            <label class="font-weight-bold" style="width:100%">Picture</label>
                        </div>
                        <div class="form-group" style="text-align:center; width:100%; position:relative">
                            <InputFile class="custom-file-input file-load-fill-container" OnChange="@OnInputFileChange" />
                            <img class="img-thumbnail" src="@(string.IsNullOrEmpty(book.Image) ? "img/default.jpg" :book.Image)" />
                        </div>
                        <div class="form-group">
                            <button type="button" class="form-control btn btn-outline-primary" data-dismiss="modal" @onclick="ShowAuthorWindow">Choose authors</button>
                            <p style="height: 48px; overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;"><b>Authors: </b>@string.Concat(authors.Where(x => bookAuthors.Any(y => y.AuthorId == x.Id)).Select(x => $"{x.FirstName} {x.LastName}; "))</p>
                        </div>
                        <div class="form-group">
                            <button type="button" class="form-control btn btn-outline-primary" data-dismiss="modal" @onclick="ShowGenreWindow">Choose genres</button>
                            <p style="height: 48px; overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;"><b>Genres: </b>@string.Concat(genres.Where(x => bookGenres.Any(y => y.GenreId == x.Id)).Select(x => $"{x.Name}; "))</p>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
        <div class="modal-footer">
            <button type="submit" class="btn btn-outline-primary" data-dismiss="modal">Add</button>
            <button type="button" class="btn btn-outline-secondary" @onclick="HideAddWindow">Cancel</button>
        </div>
    </EditForm>
</BookStore.Web.Client.Components.ModalWindow>


@*AUTHOR WINDOW*@
<BookStore.Web.Client.Components.WideModalWindow Show="IsShowAuthorWindos">
    <div class="modal-header form-group without-padding">
        <h5 class="modal-title">Available authors</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideAuthorWindow">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <table style="width:100%">
        <tbody>
            <tr>
                <td colspan="2" style="padding-bottom:10px; padding-top:10px;">
                    <table style="width: 100%">
                        <tbody>
                            <tr>
                                <td style="padding-bottom:10px; padding-top:10px; text-align:start; width:200px;">
                                    <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search" @oninput="Search">
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </td>
            </tr>
            <tr>
                <td>
                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col">Id</th>
                                <th scope="col">First name</th>
                                <th scope="col">last Name</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var author in authors.Where(x => SearchAuthor(x)).Skip(AuthorPageItemCount * AuthorCurrentPageId - 1).Take(AuthorPageItemCount))
                            {
                                <tr class="@(bookAuthors.Any(x => x.AuthorId == author.Id) ? "tr-selected" : "")" @onclick="() => ClickAuthorToBook(author.Id)">
                                    <td scope="row">@author.Id</td>
                                    <td scope="row">@author.FirstName</td>
                                    <td scope="row">@author.LastName</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </td>
            </tr>
            <tr>
                <td>
                    <BookStore.Web.Client.Components.Pagination ItemsCount="@authors.Where(x => SearchAuthor(x)).Count()" @bind-CurrentPageId="AuthorCurrentPageId" @bind-PageItemCount="AuthorPageItemCount" IsShow15ItemsButton="false">
                    </BookStore.Web.Client.Components.Pagination>
                </td>
            </tr>
        </tbody>
    </table>
    <div class="modal-footer">
        <button type="button" class="btn btn-outline-primary" @onclick="ConfirmAuthor">Confirm</button>
        <button type="button" class="btn btn-outline-secondary" @onclick="HideAuthorWindow">Cancel</button>
    </div>
</BookStore.Web.Client.Components.WideModalWindow>

@*GENRE WINDOW*@
<BookStore.Web.Client.Components.WideModalWindow Show="IsShowGenreWindow">
    <div class="modal-header form-group without-padding">
        <h5 class="modal-title">Available genres</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideGenreWindow">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <table style="width:100%">
        <tbody>
            <tr>
                <td colspan="2" style="padding-bottom:10px; padding-top:10px;">
                    <table style="width: 100%">
                        <tbody>
                            <tr>
                                <td style="padding-bottom:10px; padding-top:10px; text-align:start; width:200px;">
                                    <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search" @oninput="Search">
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </td>
            </tr>
            <tr>
                <td>
                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col">Id</th>
                                <th scope="col">Name</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var genre in genres.Where(x => SearchGenre(x)).Skip(GenrePageItemCount * GenreCurrentPageId - 1).Take(GenrePageItemCount))
                            {
                                <tr class="@(bookGenres.Any(x => x.GenreId == genre.Id ) ? "tr-selected" : "")" @onclick="() => ClickGenreToBook(genre.Id)">
                                    <td scope="row">@genre.Id</td>
                                    <td scope="row">@genre.Name</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </td>
            </tr>
            <tr>
                <td>
                    <BookStore.Web.Client.Components.Pagination ItemsCount="@genres.Where(x => SearchGenre(x)).Count()" @bind-CurrentPageId="GenreCurrentPageId" @bind-PageItemCount="GenrePageItemCount" IsShow15ItemsButton="false">
                    </BookStore.Web.Client.Components.Pagination>
                </td>
            </tr>
        </tbody>
    </table>
    <div class="modal-footer">
        <button type="button" class="btn btn-outline-primary" @onclick="ConfirmGenre">Confirm</button>
        <button type="button" class="btn btn-outline-secondary" @onclick="HideGenreWindow">Cancel</button>
    </div>
</BookStore.Web.Client.Components.WideModalWindow>

<BookStore.Web.Client.Components.LoadWindow Show="IsShowLoadWindow">

</BookStore.Web.Client.Components.LoadWindow>



@code
{
    private bool IsCardsShow { get; set; } = true;

    private int CurrentPageId { get; set; } = 0;
    private int PageItemCount { get; set; } = 10;

    private int AuthorCurrentPageId { get; set; } = 0;
    private int AuthorPageItemCount { get; set; } = 10;

    private int GenreCurrentPageId { get; set; } = 0;
    private int GenrePageItemCount { get; set; } = 10;

    private string SearchText { get; set; } = string.Empty;
    private Book book = new Book();
    private List<Book> books = new List<Book>();
    private List<Author> authors = new List<Author>();
    private List<Genre> genres = new List<Genre>();

    private List<BookAuthor> bookAuthors = new List<BookAuthor>();
    private List<BookGenre> bookGenres = new List<BookGenre>();

    private DateTime ReleaseDate
    {
        get
        {
            book.ReleaseDate = book.ReleaseDate == default(DateTime) ? DateTime.Now : book.ReleaseDate;
            return book.ReleaseDate;
        }
        set => book.ReleaseDate = value;
    }
    private bool IsShowAddModal { get; set; }
    private bool IsShowDeleteModal { get; set; }
    private bool IsShowDescriptionModal { get; set; }
    private bool IsShowUpdateModal { get; set; }
    private bool IsShowLoadWindow { get; set; }
    private bool IsShowAuthorWindos { get; set; }
    private bool IsShowGenreWindow { get; set; }


    private IList<string> imageDataUrls = new List<string>();

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";

        var imageFile = e.File;

        var resizedImageFile = await imageFile.RequestImageFileAsync(format, 240, 240);
        var buffer = new byte[resizedImageFile.Size];
        await resizedImageFile.OpenReadStream(maxAllowedSize: 20480000).ReadAsync(buffer);
        var imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        book.Image = imageDataUrl;

    }

    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();
    }

    private void ClickAuthorToBook(int id)
    {
        var bookAuthor = bookAuthors.FirstOrDefault(x => x.AuthorId == id);

        if (bookAuthor != null)
        {
            bookAuthors.Remove(bookAuthor);
        }
        else
        {
            bookAuthors.Add(new BookAuthor()
            {
                AuthorId = id
            });
        }
    }

    private void ClickGenreToBook(int id)
    {
        var bookGenre = bookGenres.FirstOrDefault(x => x.GenreId == id);

        if (bookGenre != null)
        {
            bookGenres.Remove(bookGenre);
        }
        else
        {
            bookGenres.Add(new BookGenre()
            {
                GenreId = id
            });
        }
    }

    private void ConfirmAuthor()
    {
        this.IsShowAuthorWindos = false;
    }

    private void ConfirmGenre()
    {
        this.IsShowGenreWindow = false;
    }


    private void ShowAuthorWindow()
    {
        this.IsShowAuthorWindos = true;
    }

    private void HideAuthorWindow()
    {
        SearchText = string.Empty;

        this.IsShowAuthorWindos = false;
    }

    private void ShowGenreWindow()
    {
        this.IsShowGenreWindow = true;
    }

    private void HideGenreWindow()
    {
        SearchText = string.Empty;

        this.IsShowGenreWindow = false;
    }

    protected void ShowAddBookWindow()
    {
        book = new Book();
        bookGenres = new List<BookGenre>();
        bookAuthors = new List<BookAuthor>();
        this.IsShowDescriptionModal = false;
        this.IsShowUpdateModal = false;
        this.IsShowDeleteModal = false;
        this.IsShowAddModal = true;
    }


    protected void HideAddWindow()
    {
        book = new Book();
        bookAuthors = new List<BookAuthor>();
        bookGenres = new List<BookGenre>();
        this.IsShowDescriptionModal = false;
        this.IsShowUpdateModal = false;
        this.IsShowDeleteModal = false;
        this.IsShowAddModal = false;
    }

    protected void ShowDeleteWindow()
    {
        this.IsShowDescriptionModal = false;
        this.IsShowUpdateModal = false;
        this.IsShowDeleteModal = true;
        this.IsShowAddModal = false;
    }

    protected void HideDeleteWindow()
    {
        this.IsShowDescriptionModal = true;
        this.IsShowUpdateModal = false;
        this.IsShowDeleteModal = false;
        this.IsShowAddModal = false;
    }

    protected async Task ShowAndLoadDescriptionWindow(int id)
    {
        await LoadBookById(id);
        this.IsShowDescriptionModal = true;
        this.IsShowUpdateModal = false;
        this.IsShowDeleteModal = false;
        this.IsShowAddModal = false;
    }

    private void HideDescriptionWindow()
    {
        this.IsShowDescriptionModal = false;
        this.IsShowUpdateModal = false;
        this.IsShowDeleteModal = false;
        this.IsShowAddModal = false;
    }

    private void HideUpdateWindow()
    {
        this.IsShowDescriptionModal = true;
        this.IsShowUpdateModal = false;
        this.IsShowDeleteModal = false;
        this.IsShowAddModal = false;
    }

    private void ShowUpdateWindow()
    {
        bookGenres = book.GenreIds.Select(x => new BookGenre() { GenreId = x }).ToList();
        bookAuthors = book.AuthorIds.Select(x => new BookAuthor() { AuthorId = x }).ToList();

        this.IsShowDescriptionModal = false;
        this.IsShowUpdateModal = true;
        this.IsShowDeleteModal = false;
        this.IsShowAddModal = false;
    }
    private async Task LoadBooks()
    {
        IsShowLoadWindow = true;
        books = await Http.GetFromJsonAsync<List<Book>>("Book");
        authors = await Http.GetFromJsonAsync<List<Author>>("Author");
        genres = await Http.GetFromJsonAsync<List<Genre>>("Genre");
        IsShowLoadWindow = false;
    }

    private async Task LoadBookById(int id)
    {
        book = await Http.GetFromJsonAsync<Book>($"Book/{id}");
        bookGenres = book.GenreIds.Select(x => new BookGenre() { GenreId = x }).ToList();
        bookAuthors = book.AuthorIds.Select(x => new BookAuthor() { AuthorId = x }).ToList();
    }

    private async Task AddBook()
    {
        book.AuthorIds = bookAuthors.Select(x => x.AuthorId).ToList();
        book.GenreIds = bookGenres.Select(x => x.GenreId).ToList();
        await Http.PostAsJsonAsync("Book", book);
        this.IsShowDescriptionModal = false;
        this.IsShowUpdateModal = false;
        this.IsShowDeleteModal = false;
        this.IsShowAddModal = false;
    }

    private async Task UpdateBook()
    {
        book.AuthorIds = bookAuthors.Select(x => x.AuthorId).ToList();
        book.GenreIds = bookGenres.Select(x => x.GenreId).ToList();
        var result = await Http.PutAsJsonAsync("Book", book);
        book = await result.Content.ReadFromJsonAsync<Book>();
        this.IsShowDescriptionModal = true;
        this.IsShowUpdateModal = false;
        this.IsShowDeleteModal = false;
        this.IsShowAddModal = false;
    }

    private async Task DeleteBook(int id)
    {
        await Http.DeleteAsync($"Book/{id}");
        await LoadBooks();
        this.IsShowDescriptionModal = false;
        this.IsShowUpdateModal = false;
        this.IsShowDeleteModal = false;
        this.IsShowAddModal = false;
    }

    protected async Task AddSubmit()
    {
        await AddBook();
        await LoadBooks();
        this.IsShowDescriptionModal = false;
        this.IsShowUpdateModal = false;
        this.IsShowDeleteModal = false;
        this.IsShowAddModal = false;
    }

    protected async Task UpdateSubmit()
    {
        await UpdateBook();
        await LoadBooks();
        this.IsShowDescriptionModal = true;
        this.IsShowUpdateModal = false;
        this.IsShowDeleteModal = false;
        this.IsShowAddModal = false;
    }

    private bool SearchBook(Book book)
    {
        if (string.IsNullOrEmpty(SearchText))
        {
            return true;
        }

        return book.Id.ToString().ToUpperInvariant().Contains(SearchText.ToUpperInvariant())
            || book.Name.ToUpperInvariant().Contains(SearchText.ToUpperInvariant())
            || book.Price.ToString().ToUpperInvariant().Contains(SearchText.ToUpperInvariant())
            || book.Count.ToString().ToUpperInvariant().Contains(SearchText.ToUpperInvariant())
            || book.Description.ToString().ToUpperInvariant().Contains(SearchText.ToUpperInvariant())
            || book.ReleaseDate.ToString("dd-MM-yyyy").ToUpperInvariant().Contains(SearchText.ToUpperInvariant());
    }

    private bool SearchAuthor(Author author)
    {
        if (string.IsNullOrEmpty(SearchText))
        {
            return true;
        }

        return author.Id.ToString().ToUpperInvariant().Contains(SearchText.ToUpperInvariant())
            || author.FirstName.ToUpperInvariant().Contains(SearchText.ToUpperInvariant())
            || author.LastName.ToUpperInvariant().Contains(SearchText.ToUpperInvariant());
    }

    private bool SearchGenre(Genre genre)
    {
        if (string.IsNullOrEmpty(SearchText))
        {
            return true;
        }

        return genre.Id.ToString().ToUpperInvariant().Contains(SearchText.ToUpperInvariant())
            || genre.Name.ToUpperInvariant().Contains(SearchText.ToUpperInvariant());
    }

    private void Search(ChangeEventArgs e)
    {
        SearchText = e.Value.ToString().Replace("'", string.Empty);
    }
}
