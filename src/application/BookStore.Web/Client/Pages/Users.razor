
@page "/Users"
@inject HttpClient Http

<h3>Users</h3>

<table style="width:100%">
    <tbody>
        <tr>
            <td colspan="2" style="padding-bottom:10px; padding-top:10px;">
                <table style="width: 100%">
                    <tbody>
                        <tr>
                            <td style="padding-bottom:10px; padding-top:10px;">
                                <button @onclick="OpenAddWindow" class="btn btn-primary">Add user</button>
                            </td>
                            <td style="padding-bottom:10px; padding-top:10px; text-align:end; width:200px;">
                                <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search" @oninput="Search">
                            </td>
                        </tr>
                    </tbody>
                </table>
            </td>
        </tr>
        <tr>
            <td>
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th scope="col">User Id</th>
                            <th scope="col">First Name</th>
                            <th scope="col">Last Name</th>
                            <th scope="col">Email</th>
                            <th scope="col">Phone Number</th>
                            <th scope="col">User role</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in users.Where(x => SearchUser(x)).Skip(PageItemCount * CurrentPageId - 1).Take(PageItemCount))
                        {
                        <tr>
                            <td scope="row">@user.UserId</td>
                            <td scope="row">@user.FirstName</td>
                            <td scope="row">@user.LastName</td>
                            <td scope="row">@user.Email</td>
                            <td scope="row">@user.PhoneNumber</td>
                            <td scope="row">@userRoles.FirstOrDefault(x => x.Id == user.UserRoleId).Name</td>
                        </tr>
                        }
                    </tbody>
                </table>
            </td>
        </tr>
        <tr>
            <td>
                <BookStore.Web.Client.Components.Pagination ItemsCount="@users.Where(x => SearchUser(x)).Count()" @bind-CurrentPageId="CurrentPageId" @bind-PageItemCount="PageItemCount">

                </BookStore.Web.Client.Components.Pagination>
            </td>
        </tr>
    </tbody>
</table>

<BookStore.Web.Client.Components.LoadWindow Show="IsShowLoadWindow">

</BookStore.Web.Client.Components.LoadWindow>

<BookStore.Web.Client.Components.ModalWindow Show="@OpenAddModal">
    <EditForm Model="user" OnValidSubmit="@Submit">
        <DataAnnotationsValidator />
        @*<ValidationSummary />*@

        <div class="modal-header form-group without-padding">
            <h5 class="modal-title">User adding</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideAddWindow">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="form-group">
            <b>User Id</b>
            <InputText class="form-control" @bind-Value="user.UserId" @onfocusout="CheckUserId" />
            <span hidden="@(!UserWithUserIdExists)" class="validation-message">User with UserId @user?.UserId alredy exists</span>
            <ValidationMessage hidden="@UserWithUserIdExists" For="() => user.UserId" />
        </div>

        <div class="form-group">
            <b>User Role</b>
            <select class="form-control" @bind="user.UserRoleId">
                <option value="-1" selected>-- select user role --</option>
                @foreach (var userRole in userRoles)
                {
                    <option value="@userRole.Id">@userRole.Name</option>
                }
            </select>
            <ValidationMessage For="() => user.UserRoleId" />
        </div>

        <div class="form-group">
            <b>First Name</b>
            <InputText class="form-control" @bind-Value="user.FirstName" />
            <ValidationMessage For="() => user.FirstName" />
        </div>
        <div class="form-group">
            <b>Last Name</b>
            <InputText class="form-control" @bind-Value="user.LastName" />
            <ValidationMessage For="() => user.LastName" />
        </div>
        <div class="form-group">
            <b>Email</b>
            <InputText class="form-control" @bind-Value="user.Email" />
            <ValidationMessage For="() => user.Email" />
        </div>
        <div class="form-group">
            <b>Phone number</b>
            <InputText class="form-control" @bind-Value="user.PhoneNumber" />
            <ValidationMessage For="() => user.PhoneNumber" />
        </div>
        <div class="form-group">
            <b>Password</b>
            <InputText type="password" class="form-control" @bind-Value="user.Password" />
            <ValidationMessage For="() => user.Password" />
        </div>
        <div class="modal-footer">
            <button type="submit" class="btn btn-primary">Confirm</button>
        </div>
    </EditForm>

</BookStore.Web.Client.Components.ModalWindow>

@code
{
    private User user = new User();

    private List<User> users = new List<User>();
    private List<UserRole> userRoles = new List<UserRole>();

    private bool OpenAddModal { get; set; }

    private bool UserWithUserIdExists;

    private bool IsShowLoadWindow { get; set; }

    private int CurrentPageId { get; set; } = 0;
    private int PageItemCount { get; set; } = 10;
    private string SearchText { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    protected void OpenAddWindow()
    {
        this.OpenAddModal = true;
    }

    private void HideAddWindow()
    {
        user = new User();
        this.OpenAddModal = false;
    }

    private async Task LoadUsers()
    {
        this.IsShowLoadWindow = true;
        users = await Http.GetFromJsonAsync<List<User>>("User");
        userRoles = await Http.GetFromJsonAsync<List<UserRole>>("User/Roles");
        this.IsShowLoadWindow = false;
    }


    private async Task AddUser()
    {
        await Http.PostAsJsonAsync("User", user);
    }

    protected void CheckUserId()
    {
        if (!string.IsNullOrEmpty(user?.UserId))
        {
            UserWithUserIdExists = users.Any(x => x.UserId.Trim().ToUpperInvariant() == user.UserId.Trim().ToUpperInvariant());
        }
    }

    protected async Task Submit()
    {
        CheckUserId();
        if (UserWithUserIdExists)
        {
            return;
        }
        await AddUser();
        await LoadUsers();
        this.OpenAddModal = false;
    }

    private bool SearchUser(User user)
    {
        if (string.IsNullOrEmpty(SearchText))
        {
            return true;
        }

        return user.Id.ToString().ToUpperInvariant().Contains(SearchText.ToUpperInvariant())
            || user.FirstName.ToUpperInvariant().Contains(SearchText.ToUpperInvariant())
            || user.LastName.ToUpperInvariant().Contains(SearchText.ToUpperInvariant())
            || user.Email.ToUpperInvariant().Contains(SearchText.ToUpperInvariant())
            || user.PhoneNumber.ToUpperInvariant().Contains(SearchText.ToUpperInvariant())
            || userRoles.FirstOrDefault(x => x.Id == user.UserRoleId).Name.ToUpperInvariant().Contains(SearchText.ToUpperInvariant());
    }

    private void Search(ChangeEventArgs e)
    {
        SearchText = e.Value.ToString().Replace("'", string.Empty);
    }
}
